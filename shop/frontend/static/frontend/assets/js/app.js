const {createApp} = VuecreateApp({    delimiters: ['${', '}$'],    mixins: [window.mix ? window.mix : {}],    methods: {        putData(url, payload, config) {            return axios.put(url, payload, config ? config : {                headers: {                    'X-CSRFToken': this.getCookie('csrftoken'),                    'X-HERE-I-AM': 'hello'                }            }).then(response => {                return response.data ? response.data : response.json?.()            }).catch(() => {                console.warn('Метод ' + url + ' не реализован')                throw new Error('no "put" method')            })        },        postData(url, payload, config) {            return axios.post(url, payload, config ? config : {                headers: {                    'X-CSRFToken': this.getCookie('csrftoken'),                    'X-HERE-I-AM': 'hello'                }            })                .then(response => {                    return response.data ? response.data : response.json?.()                }).catch((e) => {                    console.warn('Метод ' + url + ' не реализован')                    console.warn(e)                    throw new Error('no "post" method')                })        },        getData(url, payload) {            return axios.get(url, {params: payload, headers: {'X-HERE-I-AM': 'hello'}})                .then(response => {                    return response.data ? response.data : response.json?.()                })                .catch(() => {                    console.warn('Метод ' + url + ' не реализован')                    throw new Error('no "get" method')                })        },        getCookie(name) {            let cookieValue = null;            if (document.cookie && document.cookie !== '') {                const cookies = document.cookie.split(';');                for (let i = 0; i < cookies.length; i++) {                    const cookie = cookies[i].trim();                    // Does this cookie string begin with the name we want?                    if (cookie.substring(0, name.length + 1) === (name + '=')) {                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));                        break;                    }                }            }            return cookieValue;        },        search() {            location.assign(`/catalog/?filter=${this.searchText}`)        },        getCategories() {            this.getData('/api/categories/')                .then(data => this.categories = data)                .catch(() => {                    console.warn('Ошибка получения категорий')                    this.categories = []                })        },        getBasket() {            const basket = {}            this.getData('/api/basket/')                .then(data =>                        // this.basket = data                    {                        data.forEach(item => {                            basket[item.id] = {                                ...item                            }                        })                        //                        this.basket = basket                    }                ).catch(() => {                console.warn('Ошибка при получении корзины')                this.basket = {}            })        },        getLastOrder() {            this.getData('/api/orders/active/').then(data => {                this.order = {                    ...this.order,                    ...data                }            }).catch(() => {                console.warn('Ошибка при получении активного заказа')                this.order = {                    ...this.order,                }            })        },        addToBasket(item, count) {            const id = item.id            this.postData('/api/basket/', {                id: item.id,                count: count || 1            }).then(data => {                this.basket[id] = data                console.log(this.basket)            }).catch(() => {                console.warn('Ошибка при добавлении заказа в корзину')            })        },        removeFromBasket(item, count) {            const id = item.id            axios.delete(                '/api/basket/', {                    headers: {'X-CSRFToken': this.getCookie('csrftoken')},                    params: {id: id, count: count}                },                // ).then(response => response.json()            ).then(data => { // updated basket                this.basket = data            }).catch((e) => {                console.log(e)                console.warn('Ошибка при удалении заказа из корзины')            })        },    },    computed: {        basketCount() {            return (this.basket && Object.values(this.basket)?.reduce((acc, val) => {                acc.count += val.count                acc.price += val.price                acc.total += val.count * val.price                return acc            }, {count: 0, price: 0, total: 0})) ?? {                count: 0,                price: 0,                total: 0            }        }    },    data() {        return {            // catalog page            filters: {                price: {                    minValue: 1,                    maxValue: 5000,                    currentFromValue: 1,                    currentToValue: 5000,                },            },            sortRules: [                {id: 'rating', title: 'Популярности'},                {id: 'price', title: 'Цене'},                {id: 'reviews', title: 'Отзывам'},                {id: 'created', title: 'Новизне'},            ],            topTags: [],            // reused data            categories: [                {                    id: null,                    title: '',                    image: '',                    href: '',                    subcategories: {                        id: null,                        title: '',                        image: '',                        href: ''                    }                },            ],            categoriesFromServer: [],            // reused data            catalogFromServer: [],            orders: [],            cart: [],            paymentData: {},            basket: {},            order: {                orderId: null,                createdAt: '',                products: [],                fullName: '',                phone: '',                email: '',                deliveryType: '',                city: '',                address: '',                paymentType: '',                totalCost: 0,                status: ''            },            searchText: ''        }    },    mounted() {        this.getCategories()        this.getBasket()        this.getLastOrder()  //  # вероятно, это нужно для оплаты позднее    },}).mount('#site')